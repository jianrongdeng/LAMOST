'''
============================
ex1_LeastSquareLinearFit.py
============================
  Date: 20191010 by Jianrong Deng
  Purpose: an example of a linear fit using the least square method
  Method: use numpy.linalg.lstsq
          " Solves the equation a x = b by computing a vector x that minimizes the squared Euclidean 2-norm \| b - a x \|^2_2"
  Reference: https://docs.scipy.org/doc/numpy/reference/generated/numpy.linalg.lstsq.html#numpy.linalg.lstsq
  Input: array x and y
  Output: fitting parameters of the line
        y = mx + c
	residuals = sums of residuals
  Plot: data points vs fitting line

============================
============================
'''



>>> import numpy as np
>>> x = np.array([0, 1, 2, 3])
>>> y = np.array([-1, 0.2, 0.9, 2.1])
>>>
>>> x
array([0, 1, 2, 3])
>>> y
array([-1. ,  0.2,  0.9,  2.1])
>>> A = np.vstack([x, np.ones(len(x))])
>>> A
array([[ 0.,  1.,  2.,  3.],
       [ 1.,  1.,  1.,  1.]])
>>> A = np.vstack([x, np.ones(len(x))]).T
>>> A
array([[ 0.,  1.],
       [ 1.,  1.],
       [ 2.,  1.],
       [ 3.,  1.]])
>>> m, c = np.linalg.lstsq(A, y)[0]
>>> m,c
(0.99999999999999989, -0.94999999999999973)
>>> import matplotlib.pyplot as plt
>>> _ = plt.plot(x, y, 'o', label='Original data', markersize=10)
>>> _ = plt.plot(x, m*x + c, 'r', label='Fitted line')
>>> _ = plt.legend()
>>> plt.show()

>>>
>>> np.linalg.lstsq(A, y)
(array([ 1.  , -0.95]), array([ 0.05]), 2, array([ 4.10003045,  1.09075677]))
>>> np.linalg.lstsq(A, y)[1]
array([ 0.05])

